
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core tables that exist in Supabase
model Course {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  description   String?
  duration_hours Int?
  level         String?
  price         Decimal? @db.Decimal
  thumbnail_url String?
  is_published  Boolean? @default(false)
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
  
  // Relationships
  modules       Module[]
  
  @@map("courses")
}

model Module {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  course_id   String   @db.Uuid
  title       String
  description String?
  order_index Int
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  
  // Relationships
  course      Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  
  @@map("modules")
}

model Lesson {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  module_id        String   @db.Uuid
  title            String
  description      String?
  content          String?
  video_url        String?
  duration_minutes Int?
  order_index      Int
  is_published     Boolean? @default(false)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  updated_at       DateTime @default(now()) @db.Timestamptz(6)
  
  // Relationships
  module           Module   @relation(fields: [module_id], references: [id], onDelete: Cascade)
  
  @@map("lessons")
}

model Profile {
  id         String   @id @db.Uuid
  email      String?
  name       String?
  avatar_url String?
  provider   String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  
  @@map("profiles")
}

model Note {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  title      String
  content    String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  
  @@map("notes")
}

// Medical system tables (existing in database)
model Paciente {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  nome             String
  email            String?
  telefone         String
  cpf              String
  endereco         String?
  data_nascimento  DateTime? @db.Date
  observacoes      String?
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)
  
  @@map("pacientes")
}

model Profissional {
  id                    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  nome                  String
  especialidade         String
  email                 String?
  telefone              String?
  registro_profissional String?
  status                String?   @default("ativo")
  horario_inicio        DateTime? @default(dbgenerated("'08:00:00'::time without time zone")) @db.Time(6)
  horario_fim           DateTime? @default(dbgenerated("'18:00:00'::time without time zone")) @db.Time(6)
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at            DateTime? @default(now()) @db.Timestamptz(6)
  
  // Relationships
  servicos              ProfissionalServico[]
  
  @@map("profissionais")
}

model Servico {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  nome        String
  descricao   String?
  duracao     Int
  preco       Decimal?  @db.Decimal
  status      String?   @default("ativo")
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  
  // Relationships
  profissionais ProfissionalServico[]
  
  @@map("servicos")
}

model ProfissionalServico {
  profissional_id String @db.Uuid
  servico_id      String @db.Uuid
  
  // Relationships
  profissional    Profissional @relation(fields: [profissional_id], references: [id])
  servico         Servico      @relation(fields: [servico_id], references: [id])
  
  @@id([profissional_id, servico_id])
  @@map("profissionais_servicos")
}

model Task {
  id          BigInt   @id @default(autoincrement())
  description String   @db.VarChar
  status      Boolean
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  
  @@map("tasks")
}

model MessageBuffer {
  id         BigInt   @id @default(autoincrement())
  content    String
  timestamp  Int?
  chatid     String?
  idMessage  String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  
  @@map("message_buffer")
}
