
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String
  phone             String?
  cpf               String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relacionamentos
  minister          Minister?
  orders            Order[]
  courseEnrollments CourseEnrollment[]
  
  @@map("users")
}

model Minister {
  id                String            @id @default(cuid())
  userId            String            @unique
  ministerNumber    String            @unique
  churchName        String
  churchCnpj        String?
  churchAddress     String
  churchCity        String
  churchState       String
  churchZipCode     String
  ordinationDate    DateTime
  denomination      String
  status            MinisterStatus    @default(PENDING)
  associationDate   DateTime?
  expirationDate    DateTime?
  digitalCard       String?           // URL para carteira digital
  documents         MinisterDocument[]
  
  // Relacionamentos
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@map("ministers")
}

model MinisterDocument {
  id          String   @id @default(cuid())
  ministerId  String
  type        String   // "rg", "cpf", "ordination_certificate", etc.
  fileName    String
  fileUrl     String
  verified    Boolean  @default(false)
  
  minister    Minister @relation(fields: [ministerId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("minister_documents")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  instructor  String
  duration    Int      // em horas
  price       Decimal
  category    String
  level       CourseLevel
  thumbnail   String?
  videoUrl    String?
  materials   String[] // URLs de materiais
  status      CourseStatus @default(DRAFT)
  
  // Relacionamentos
  enrollments CourseEnrollment[]
  lessons     Lesson[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("courses")
}

model Lesson {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String?
  videoUrl    String
  duration    Int      // em minutos
  order       Int
  
  // Relacionamentos
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    LessonProgress[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("lessons")
}

model CourseEnrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  progress    Int      @default(0) // porcentagem de 0 a 100
  completed   Boolean  @default(false)
  completedAt DateTime?
  certificate String?  // URL do certificado
  
  // Relacionamentos
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model LessonProgress {
  id        String  @id @default(cuid())
  userId    String
  lessonId  String
  completed Boolean @default(false)
  watchTime Int     @default(0) // tempo assistido em segundos
  
  // Relacionamentos
  lesson    Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Decimal
  category    ProductCategory
  type        ProductType
  sku         String      @unique
  stock       Int         @default(0)
  images      String[]    // URLs das imagens
  fileUrl     String?     // Para produtos digitais
  status      ProductStatus @default(ACTIVE)
  featured    Boolean     @default(false)
  
  // Relacionamentos
  orderItems  OrderItem[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("products")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  total       Decimal
  subtotal    Decimal
  tax         Decimal     @default(0)
  shipping    Decimal     @default(0)
  
  // Endere√ßo de entrega
  shippingName    String?
  shippingAddress String?
  shippingCity    String?
  shippingState   String?
  shippingZipCode String?
  
  // Pagamento
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  pixKey          String?
  pixQrCode       String?
  
  // Relacionamentos
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  
  // Relacionamentos
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  
  @@map("newsletter")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  location    String?
  online      Boolean  @default(false)
  price       Decimal  @default(0)
  maxParticipants Int?
  registrationDeadline DateTime?
  image       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("events")
}

// Enums
enum MinisterStatus {
  PENDING
  ACTIVE
  SUSPENDED
  EXPIRED
  CANCELLED
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ProductCategory {
  BOOK
  EBOOK
  AUDIOBOOK
  COURSE
  MATERIAL
  GIFT
  CLOTHING
  ACCESSORY
}

enum ProductType {
  PHYSICAL
  DIGITAL
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
